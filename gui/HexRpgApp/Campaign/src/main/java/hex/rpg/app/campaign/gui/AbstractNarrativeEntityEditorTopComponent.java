package hex.rpg.app.campaign.gui;

import hex.rpg.api.modulesuport.gui.DataEditorTopComponent;
import hex.rpg.core.domain.NarrativeEntity;
import java.awt.BorderLayout;
import java.util.Map;
import java.util.Objects;
import javax.swing.JComponent;
import javax.swing.JPanel;

public abstract class AbstractNarrativeEntityEditorTopComponent<T extends NarrativeEntity> extends DataEditorTopComponent<T> {

    private T originalEntity;
    private boolean initialized;

    public AbstractNarrativeEntityEditorTopComponent() {
        this(null);
    }
    
    public AbstractNarrativeEntityEditorTopComponent(T entity) {
        this(entity, null, null);
    }

    public AbstractNarrativeEntityEditorTopComponent(T entity, JPanel metaDataPanel, Map<String, JPanel> entityPanelMap) {
        initComponents();
        if (entity != null) {
            if (entity.getTitle() == null || entity.getTitle().equals("")) {
                setName("new " + entity.getClass().getSimpleName());
                setToolTipText("Editor for " + getName());
            } else {
                setName(entity.getTitle());
                setToolTipText("Editor for " + entity.getClass().getSimpleName() + ": " + getName());
            }
            if (metaDataPanel != null) {
                addEntitySpecificMetaDataPanel(metaDataPanel);
            }
            if (entityPanelMap != null) {
                for (String label : entityPanelMap.keySet()) {
                    addTab(label, entityPanelMap.get(label));
                }
            }
            setEditedEntity(entity);
        }
        setupListeners();
    }

    private void setupListeners() {
        titleTextField.getDocument().addDocumentListener(new ContentDocumentListener());
        shortDescriptionTextArea.getDocument().addDocumentListener(new ContentDocumentListener());
        descriptionTextArea.getDocument().addDocumentListener(new ContentDocumentListener());
        refereeInfoTextArea.getDocument().addDocumentListener(new ContentDocumentListener());
        refereeNotesTextArea.getDocument().addDocumentListener(new ContentDocumentListener());
        setupEntitySpecificListeners();
    }
    
    @Override
    public String toString() {
        return getName();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityTabbedPane = new javax.swing.JTabbedPane();
        metaDataPanel = new javax.swing.JPanel();
        commonMetaDataPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        titleTextField = new javax.swing.JTextField();
        shortDescriptionLabel = new javax.swing.JLabel();
        shortDescriptionScrollPane = new javax.swing.JScrollPane();
        shortDescriptionTextArea = new javax.swing.JTextArea();
        descriptionPanel = new javax.swing.JPanel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        refereeInfoPanel = new javax.swing.JPanel();
        refereeInfoScrollPane = new javax.swing.JScrollPane();
        refereeInfoTextArea = new javax.swing.JTextArea();
        refereeNotesPanel = new javax.swing.JPanel();
        refereeNotesScrollPane = new javax.swing.JScrollPane();
        refereeNotesTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        entityTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        metaDataPanel.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, org.openide.util.NbBundle.getMessage(AbstractNarrativeEntityEditorTopComponent.class, "AbstractNarrativeEntityEditorTopComponent.titleLabel.text")); // NOI18N

        titleTextField.setText(org.openide.util.NbBundle.getMessage(AbstractNarrativeEntityEditorTopComponent.class, "AbstractNarrativeEntityEditorTopComponent.titleTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(shortDescriptionLabel, org.openide.util.NbBundle.getMessage(AbstractNarrativeEntityEditorTopComponent.class, "AbstractNarrativeEntityEditorTopComponent.shortDescriptionLabel.text")); // NOI18N

        shortDescriptionTextArea.setColumns(20);
        shortDescriptionTextArea.setLineWrap(true);
        shortDescriptionTextArea.setRows(5);
        shortDescriptionTextArea.setWrapStyleWord(true);
        shortDescriptionScrollPane.setViewportView(shortDescriptionTextArea);

        javax.swing.GroupLayout commonMetaDataPanelLayout = new javax.swing.GroupLayout(commonMetaDataPanel);
        commonMetaDataPanel.setLayout(commonMetaDataPanelLayout);
        commonMetaDataPanelLayout.setHorizontalGroup(
            commonMetaDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commonMetaDataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(commonMetaDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shortDescriptionScrollPane)
                    .addGroup(commonMetaDataPanelLayout.createSequentialGroup()
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(titleTextField))
                    .addGroup(commonMetaDataPanelLayout.createSequentialGroup()
                        .addComponent(shortDescriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        commonMetaDataPanelLayout.setVerticalGroup(
            commonMetaDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commonMetaDataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(commonMetaDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel)
                    .addComponent(titleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(shortDescriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(shortDescriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        metaDataPanel.add(commonMetaDataPanel, java.awt.BorderLayout.NORTH);

        entityTabbedPane.addTab(org.openide.util.NbBundle.getMessage(AbstractNarrativeEntityEditorTopComponent.class, "AbstractNarrativeEntityEditorTopComponent.metaDataPanel.TabConstraints.tabTitle"), metaDataPanel); // NOI18N

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setWrapStyleWord(true);
        descriptionScrollPane.setViewportView(descriptionTextArea);

        javax.swing.GroupLayout descriptionPanelLayout = new javax.swing.GroupLayout(descriptionPanel);
        descriptionPanel.setLayout(descriptionPanelLayout);
        descriptionPanelLayout.setHorizontalGroup(
            descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(descriptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                .addContainerGap())
        );
        descriptionPanelLayout.setVerticalGroup(
            descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(descriptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addContainerGap())
        );

        entityTabbedPane.addTab(org.openide.util.NbBundle.getMessage(AbstractNarrativeEntityEditorTopComponent.class, "AbstractNarrativeEntityEditorTopComponent.descriptionPanel.TabConstraints.tabTitle"), descriptionPanel); // NOI18N

        refereeInfoTextArea.setColumns(20);
        refereeInfoTextArea.setLineWrap(true);
        refereeInfoTextArea.setRows(5);
        refereeInfoTextArea.setWrapStyleWord(true);
        refereeInfoScrollPane.setViewportView(refereeInfoTextArea);

        javax.swing.GroupLayout refereeInfoPanelLayout = new javax.swing.GroupLayout(refereeInfoPanel);
        refereeInfoPanel.setLayout(refereeInfoPanelLayout);
        refereeInfoPanelLayout.setHorizontalGroup(
            refereeInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(refereeInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refereeInfoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                .addContainerGap())
        );
        refereeInfoPanelLayout.setVerticalGroup(
            refereeInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(refereeInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refereeInfoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addContainerGap())
        );

        entityTabbedPane.addTab(org.openide.util.NbBundle.getMessage(AbstractNarrativeEntityEditorTopComponent.class, "AbstractNarrativeEntityEditorTopComponent.refereeInfoPanel.TabConstraints.tabTitle"), refereeInfoPanel); // NOI18N

        refereeNotesTextArea.setColumns(20);
        refereeNotesTextArea.setLineWrap(true);
        refereeNotesTextArea.setRows(5);
        refereeNotesTextArea.setWrapStyleWord(true);
        refereeNotesScrollPane.setViewportView(refereeNotesTextArea);

        javax.swing.GroupLayout refereeNotesPanelLayout = new javax.swing.GroupLayout(refereeNotesPanel);
        refereeNotesPanel.setLayout(refereeNotesPanelLayout);
        refereeNotesPanelLayout.setHorizontalGroup(
            refereeNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(refereeNotesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refereeNotesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                .addContainerGap())
        );
        refereeNotesPanelLayout.setVerticalGroup(
            refereeNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(refereeNotesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refereeNotesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addContainerGap())
        );

        entityTabbedPane.addTab(org.openide.util.NbBundle.getMessage(AbstractNarrativeEntityEditorTopComponent.class, "AbstractNarrativeEntityEditorTopComponent.refereeNotesPanel.TabConstraints.tabTitle"), refereeNotesPanel); // NOI18N

        add(entityTabbedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel commonMetaDataPanel;
    private javax.swing.JPanel descriptionPanel;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JTabbedPane entityTabbedPane;
    private javax.swing.JPanel metaDataPanel;
    private javax.swing.JPanel refereeInfoPanel;
    private javax.swing.JScrollPane refereeInfoScrollPane;
    private javax.swing.JTextArea refereeInfoTextArea;
    private javax.swing.JPanel refereeNotesPanel;
    private javax.swing.JScrollPane refereeNotesScrollPane;
    private javax.swing.JTextArea refereeNotesTextArea;
    private javax.swing.JLabel shortDescriptionLabel;
    private javax.swing.JScrollPane shortDescriptionScrollPane;
    private javax.swing.JTextArea shortDescriptionTextArea;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField titleTextField;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        requestActive();
    }

    @Override
    public void componentClosed() {
    }

    abstract void writeProperties(java.util.Properties p);

    abstract void readProperties(java.util.Properties p);

    @Override
    public void addNotify() {
        super.addNotify();
        JComponent parent = (JComponent) getParent();
        parent.setOpaque(false);
    }

    private void populateCommonFields() {
        titleTextField.setText(originalEntity.getTitle());
        shortDescriptionTextArea.setText(originalEntity.getShortDescription());
        descriptionTextArea.setText(originalEntity.getDescription());
        refereeInfoTextArea.setText(originalEntity.getRefereeInfo());
        refereeNotesTextArea.setText(originalEntity.getRefereeNotes());
    }

    protected T getEntity() {
        return originalEntity;
    }

    @Override
    protected final void setEditedEntity(T entity) {
        initialized = false;
        originalEntity = entity;
        populateCommonFields();
        populateEntitySpecificFields();
        initialized = true;
    }

    private void addEntitySpecificMetaDataPanel(JPanel panel) {
        metaDataPanel.add(panel, BorderLayout.CENTER);
    }

    private void addTab(String label, JPanel panel) {
        entityTabbedPane.add(label, panel);
    }
    
    protected JPanel getPanel(String label) {
        for (int i = 0; i < entityTabbedPane.getComponentCount(); i++) {
            if (entityTabbedPane.getTitleAt(i).equals(label)) {
                return (JPanel) entityTabbedPane.getComponentAt(i);
            }
        }
        return null;
    }

    protected abstract void populateEntitySpecificFields();

    protected abstract boolean entitySpecificFieldsNeedsSaving();
    
    protected abstract void setupEntitySpecificListeners();

    @Override
    protected final boolean needsSaving() {
        if (initialized == false) {
            return false;
        }
        if (entitySpecificFieldsNeedsSaving()) {
            return true;
        }
        if (!Objects.equals(titleTextField.getText(), originalEntity.getTitle())) {
            return true;
        }
        if (!Objects.equals(shortDescriptionTextArea.getText(), originalEntity.getShortDescription())) {
            return true;
        }
        if (!Objects.equals(descriptionTextArea.getText(), originalEntity.getDescription())) {
            return true;
        }
        if (!Objects.equals(refereeInfoTextArea.getText(), originalEntity.getRefereeInfo())) {
            return true;
        }
        if (!Objects.equals(refereeNotesTextArea.getText(), originalEntity.getRefereeNotes())) {
            return true;
        }
        return false;
    }
}
