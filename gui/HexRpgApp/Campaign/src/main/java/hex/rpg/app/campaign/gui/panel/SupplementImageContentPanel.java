package hex.rpg.app.campaign.gui.panel;

import hex.rpg.api.modulesuport.file.ImageFileFilter;
import hex.rpg.api.modulesuport.gui.dialog.HexDialog;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileFilter;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.Exceptions;

/**
 *
 * @author hln
 */
public class SupplementImageContentPanel extends javax.swing.JPanel {

    private final FileFilter imageFileFilter = new ImageFileFilter();
    private byte[] contentByteArray;
    private byte[] originalContent;

    public SupplementImageContentPanel() {
        initComponents();
        imagePanel.getViewport().setOpaque(false);
    }

    public void setContent(byte[] content) {
        contentByteArray = content;
        originalContent = content;
        setImage(content);
    }

    public byte[] getContent() {
        return contentByteArray;
    }

    public JScrollPane getImagePanel() {
        return imagePanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        selectButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        imagePanel = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        buttonPanel.setOpaque(false);

        org.openide.awt.Mnemonics.setLocalizedText(selectButton, org.openide.util.NbBundle.getMessage(SupplementImageContentPanel.class, "SupplementImageContentPanel.selectButton.text")); // NOI18N
        selectButton.setPreferredSize(new java.awt.Dimension(100, 26));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(selectButton);

        org.openide.awt.Mnemonics.setLocalizedText(deleteButton, org.openide.util.NbBundle.getMessage(SupplementImageContentPanel.class, "SupplementImageContentPanel.deleteButton.text")); // NOI18N
        deleteButton.setPreferredSize(new java.awt.Dimension(100, 26));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(deleteButton);

        org.openide.awt.Mnemonics.setLocalizedText(resetButton, org.openide.util.NbBundle.getMessage(SupplementImageContentPanel.class, "SupplementImageContentPanel.resetButton.text")); // NOI18N
        resetButton.setPreferredSize(new java.awt.Dimension(100, 26));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(resetButton);

        add(buttonPanel, java.awt.BorderLayout.PAGE_START);

        imagePanel.setOpaque(false);
        add(imagePanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        selectImageContent(selectImageFile());
    }//GEN-LAST:event_selectButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        deleteContent();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        resetContent();
    }//GEN-LAST:event_resetButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane imagePanel;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables

    private void selectImageContent(File imageFile) {
        if (imageFile != null && imageFileFilter.accept(imageFile) && !imageFile.isDirectory()) {
            contentByteArray = imageFile2ByteArray(imageFile);
            setImage(contentByteArray);
        } else if (imageFile != null && (imageFile.isDirectory() || !imageFileFilter.accept(imageFile))) {
            HexDialog.showMessageDialog("Image file select", "You have to select an image file of one of the following formats: jpg, gif, png, bmp eller wbmp.");
        }
    }

    private File selectImageFile() {
        File imageFile = new FileChooserBuilder(System.getProperty("user.home")).
                setApproveText("Select").
                setFilesOnly(true).
                setFileFilter(imageFileFilter).
                setFileHiding(true).
                setControlButtonsAreShown(true).
                setTitle("Select Image for the Supplement").
                showOpenDialog();
        return imageFile;
    }

    private void resetContent() {
        contentByteArray = originalContent;
        setImage(contentByteArray);
    }

    private void deleteContent() {
        contentByteArray = null;
        setImage(null);
    }

    private void setImage(byte[] imageData) {
        if (imageData != null) {
            final JPanel dummyPanel = new JPanel();
            dummyPanel.setOpaque(false);
            try {
                BufferedImage image = ImageIO.read(new ByteArrayInputStream(imageData));
                JLabel label = new JLabel(new ImageIcon(image));
                label.setOpaque(false);
                imagePanel.setViewportView(label);
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        } else {
            final JPanel dummyPanel = new JPanel();
            dummyPanel.setOpaque(false);
            imagePanel.setViewportView(dummyPanel);
        }
    }

    private byte[] imageFile2ByteArray(File imageFile) {
        try {
            BufferedImage result = ImageIO.read(imageFile);
            String fileSuffix = imageFile.getName().substring(imageFile.getName().lastIndexOf(".") + 1);
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            ImageIO.write(result, fileSuffix, outputStream);
            return outputStream.toByteArray();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
            return null;
        }
    }
}
