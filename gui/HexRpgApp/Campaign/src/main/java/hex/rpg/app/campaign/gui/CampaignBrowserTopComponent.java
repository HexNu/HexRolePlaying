package hex.rpg.app.campaign.gui;

import hex.rpg.app.campaign.lookup.CampaignViewContext;
import hex.rpg.app.campaign.node.CampaignNode;
import hex.rpg.app.domain.campaign.AppCampaign;
import javax.swing.JComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.explorer.view.TreeView;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

@ConvertAsProperties(dtd = "-//hex.rpg.app.campaign.gui//CampaignBrowser//EN", autostore = false)
@TopComponent.Description(
        preferredID = "CampaignBrowserTopComponent",
        iconBase = "hex/rpg/app/campaign/gui/female-eye.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "hex.rpg.app.campaign.gui.CampaignBrowserTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_CampaignBrowserAction",
        preferredID = "CampaignBrowserTopComponent"
)
@Messages({
    "CTL_CampaignBrowserAction=CampaignBrowser",
    "CTL_CampaignBrowserTopComponent=CampaignBrowser Window",
    "HINT_CampaignBrowserTopComponent=This is a CampaignBrowser window"
})
public final class CampaignBrowserTopComponent extends TopComponent implements ExplorerManager.Provider {

    private final ExplorerManager explorerManager = new ExplorerManager();

    private Lookup.Result<AppCampaign> lookupResult;
    private CampaignNode currentCampaignNode;
    private final TreeView treeView = new BeanTreeView();

    public CampaignBrowserTopComponent() {
        initComponents();
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
        setName(Bundle.CTL_CampaignBrowserTopComponent());
        setToolTipText(Bundle.HINT_CampaignBrowserTopComponent());
        setOpaque(false);
        add(treeView);
        treeView.setRootVisible(true);
        initialize();
    }

    private void initialize() {
        lookupResult = CampaignViewContext.getLookup().lookupResult(AppCampaign.class);
        lookupResult.addLookupListener(new LookupListener() {
            @Override
            public void resultChanged(LookupEvent le) {
                AppCampaign campaign;
                if (!lookupResult.allInstances().isEmpty()) {
                    campaign = lookupResult.allInstances().iterator().next();
                    currentCampaignNode = new CampaignNode(campaign);
                    explorerManager.setRootContext(currentCampaignNode);
                    explorerManager.setExploredContext(explorerManager.getRootContext());
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    @Override
    public void addNotify() {
        super.addNotify();
        JComponent parent = (JComponent) getParent();
        parent.setOpaque(false);
    }
}
